s1_behavior_pvalues3 <- ifelse(round(pvalues3, digits = 2) == 0, "0.00", round(pvalues3, digits = 2)) #RTM = -STM
s1_behavior_pvalues4 <- ifelse(round(pvalues4, digits = 2) == 0, "0.00", round(pvalues4, digits = 2)) #TMB
# Table A2. Emotionality of message ------------------------------------------
base_list <- map(outcomes[1:4],
~lm_robust(as.formula(paste0(.x, "~lostT1*messenger*emotionalMsg")), data = df1))
list <- base_list
make_texreg("behavior_regression_emotional", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"emotionalMsg" = "Emotional Message",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:emotionalMsg" = "Lost x Emotional",
"messenger:emotionalMsg" = "Messenger x Emotional",
"lostT1:messenger:emotionalMsg" = "Lost x Messenger x Emotional",
"(Intercept)" = "Constant"),
caption = "Regressions of behavioral measures on losing in task 1, being paired with the messenger, receiving an emotional message, and their interaction",
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"\\item[\\hspace{-5mm}] %stars."))
# Table A3. Type of task -------------------------------------------
base_list <- map(outcomes[1:4],
~lm_robust(as.formula(paste0(.x, "~lostT1*messenger*counting")), data = df1))
list <- base_list
make_texreg("behavior_regression_counting", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"counting" = "Counting Task",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:counting" = "Lost x Counting",
"messenger:counting" = "Messenger x Counting",
"lostT1:messenger:counting" = "Lost x Messenger x Counting",
"(Intercept)" = "Constant"),
caption = "Regressions of behavioral measures on losing in task 1, being paired with the messenger, performing the counting task, and their interaction",
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"\\item[\\hspace{-5mm}] %stars."))
# Table A4. Attitude regression (for Figure 3) ----------------------
base_list <- map(outcomes[5:9],
~lm_robust(as.formula(paste0(.x, "~lostT1*messenger")), data = df1))
list <- base_list
# STM effect
pvalues1 <- rep(0, 5)
for(i in seq_along(list)){
pvalues1[i] <-  as.numeric(summary(glht(list[[i]], c("messenger + lostT1:messenger = 0")))$test$pvalues)
}
# RTM effect
pvalues2 <- rep(0,5)
for(i in seq_along(list)){
pvalues2[i] <-  list[[i]]$p.value[3]
}
# RTM = -STM?
pvalues3 <- rep(0, 5)
for(i in seq_along(list)){
pvalues3[i] <-  as.numeric(summary(glht(list[[i]], linfct = c("2*messenger + lostT1:messenger = 0")))$test$pvalues)
}
# TMB
joint_hypothesis <- c("messenger  = 0", "lostT1:messenger = 0")
pvalues4 <- rep(0,5)
for(i in seq_along(list)){
pvalues4[i] <-  linearHypothesis(list[[i]], joint_hypothesis, test = "F")$`Pr(>F)`[2]
}
make_texreg("attitude_regression", list,
custom.model.names = c("Trustworthy", "Nice", "Likeable", "Generous",
"\\makecell{Attitudes\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"lostT1:messenger" = "Lost x Messenger",
"(Intercept)" = "Constant"),
custom.gof.rows = list("STM: $\\beta_2 + \\beta_3 = 0$ $p$-values" = pvalues1,
"RTM: $\\beta_2 = 0$ $p$-values" = pvalues2,
"RTM = $-$STM: $2\\beta_2+\\beta_3 = 0$ $p$-values" = pvalues3,
"TMB: $\\beta_2 = 0, \\beta_3 = 0$ $p$-values" = pvalues4),
caption = "Regressions of attitude measures on losing in task 1, being paired with the messenger, and their interaction",
scalebox = .88,
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
The trustworthy, nice, likeable, and generous DVs asks respondents to rate these messenger's characteristics on a 7-point Likert scale, where a score of 1 indicates that the messenger does not have that trait at all, while a score of 7 means that a trait describes the messenger extremely well.
In the attitudes index, the DV is calculated by averaging the standardized ratings of the trustworthy, nice, likeable, and generous DVs to an index ranging from 0 to 1.",
"\\item[\\hspace{-5mm}] %stars."))
s1_attitude_pvalues3 <- ifelse(round(pvalues3, digits = 2) == 0, "0.00", round(pvalues3, digits = 2)) #RTM = -STM
s1_attitude_pvalues4 <- ifelse(round(pvalues4, digits = 2) == 0, "0.00", round(pvalues4, digits = 2)) #TMB
# Table A1. Behavior regression (for Figure 2) ----------------------
base_list <- map(outcomes[1:4],
~lm_robust(as.formula(paste0(.x, "~lostT1*messenger")), data = df1))
list <- base_list
# STM effect
pvalues1 <- rep(0, 4)
for(i in seq_along(list)){
pvalues1[i] <-  as.numeric(summary(glht(list[[i]], c("messenger + lostT1:messenger = 0")))$test$pvalues)
}
# RTM effect
pvalues2 <- rep(0,4)
for(i in seq_along(list)){
pvalues2[i] <-  list[[i]]$p.value[3]
}
# RTM = -STM?
pvalues3 <- rep(0, 4)
for(i in seq_along(list)){
pvalues3[i] <-  as.numeric(summary(glht(list[[i]], linfct = c("2*messenger + lostT1:messenger = 0")))$test$pvalues)
}
# TMB
joint_hypothesis <- c("messenger = 0", "lostT1:messenger = 0")
pvalues4 <- rep(0,4)
for(i in seq_along(list)){
pvalues4[i] <-  linearHypothesis(list[[i]], joint_hypothesis, test = "F")$`Pr(>F)`[2]
}
make_texreg("behavior_regression", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"lostT1:messenger" = "Lost x Messenger",
"(Intercept)" = "Constant"),
custom.gof.rows = list("STM: $\\beta_2 + \\beta_3 = 0$ $p$-values" = pvalues1,
"RTM: $\\beta_2 = 0$ $p$-values" = pvalues2,
"RTM = $-$STM: $2 \\beta_2+\\beta_3 = 0$ $p$-values" = pvalues3,
"TMB: $\\beta_2 = 0, \\beta_3 = 0$ $p$-values" = pvalues4),
caption = "Regressions of behavioral measures on losing in task 1, being paired with the messenger, and their interaction",
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"\\item[\\hspace{-5mm}] %stars."))
s1_behavior_pvalues3 <- ifelse(round(pvalues3, digits = 2) == 0, "0.00", round(pvalues3, digits = 2)) #RTM = -STM
s1_behavior_pvalues4 <- ifelse(round(pvalues4, digits = 2) == 0, "0.00", round(pvalues4, digits = 2)) #TMB
# Table A2. Emotionality of message ------------------------------------------
base_list <- map(outcomes[1:4],
~lm_robust(as.formula(paste0(.x, "~lostT1*messenger*emotionalMsg")), data = df1))
list <- base_list
make_texreg("behavior_regression_emotional", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"emotionalMsg" = "Emotional Message",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:emotionalMsg" = "Lost x Emotional",
"messenger:emotionalMsg" = "Messenger x Emotional",
"lostT1:messenger:emotionalMsg" = "Lost x Messenger x Emotional",
"(Intercept)" = "Constant"),
caption = "Regressions of behavioral measures on losing in task 1, being paired with the messenger, emotionality of message, and their interaction",
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"\\item[\\hspace{-5mm}] %stars."))
# Table A3. Type of task -------------------------------------------
base_list <- map(outcomes[1:4],
~lm_robust(as.formula(paste0(.x, "~lostT1*messenger*counting")), data = df1))
list <- base_list
make_texreg("behavior_regression_counting", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"counting" = "Counting Task",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:counting" = "Lost x Counting",
"messenger:counting" = "Messenger x Counting",
"lostT1:messenger:counting" = "Lost x Messenger x Counting",
"(Intercept)" = "Constant"),
caption = "Regressions of behavioral measures on losing in task 1, being paired with the messenger, type of task, and their interaction",
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"\\item[\\hspace{-5mm}] %stars."))
make_kable(exp1_sample, col.names = c("Variable", "Mean", "SD", "Min", "Max"),
caption = "Sample demographics, Experiment 1")
# Table B1. Sample Demographics -----------------------------------------------------
sample1_df <- df1 |>
select(dictator_all, spin_all, pd_all,
trust, nice, likeable, generous,
"age", "female", "ideology", "education", "employed", "white", "hispNew", "believeLuck", "emotionReg", "justWorld")
table(exp1_sample$rowname)
exp1_sample <- as.data.frame(round(apply(sample1_df, 2, mean, na.rm = TRUE), digits = 3)) %>%
cbind(round(apply(sample1_df, 2, sd, na.rm = TRUE), digits = 3)) %>%
cbind(round(apply(sample1_df, 2, min, na.rm = TRUE), digits = 3)) %>%
cbind(round(apply(sample1_df, 2, max, na.rm = TRUE), digits = 3)) %>%
rownames_to_column() %>%
mutate(rowname = case_when(rowname == "dictator_all" ~ "Dictator Game Outcome",
rowname == "spin_all" ~ "Spin the Wheel Outcome",
rowname == "pd_all" ~ "Prisoner's Dilemma Outcome",
rowname == "trust" ~ "Trustworthiness Outcome",
rowname == "nice" ~ "Niceness Outcome",
rowname == "likeable" ~ "Likeable Outcome",
rowname == "generous" ~ "Generous Outcome",
rowname == "age" ~ "Age",
rowname == "female" ~ "Female",
rowname == "ideology" ~ "Ideology",
rowname == "education" ~ "Education",
rowname == "employed" ~ "Employed",
rowname == "white" ~ "White",
rowname == "hispNew" ~ "Hispanic",
rowname == "believeLuck" ~ "Belief in Luck Scale",
rowname == "emotionReg" ~ "Emotion Regulation Scale",
rowname == "justWorld" ~ "Just World Scale"))
make_kable(exp1_sample, col.names = c("Variable", "Mean", "SD", "Min", "Max"),
caption = "Sample demographics, Experiment 1")
# Table B2 ("Table 1 w/ logit"). Behavior regressions w/ logit ---------------------------------------
tobit_dictator <- tobit(dictator_all ~ lostT1*messenger, left = 0, right = 50, data = df1, cluster = ResponseId)
summ_tobit_dictator <- summary(tobit_dictator)
logit_spin <- glm(spin_all ~ lostT1*messenger, family = binomial(link = "logit"),
data = df1)
summ_logit_spin <- coeftest(logit_spin, vcov = vcovHC, type = "HC2")
logit_pd <- glm(pd_all ~ lostT1*messenger, family = binomial(link = "logit"),
data = df1)
summ_logit_pd <- coeftest(logit_pd, vcov = vcovHC, type = "HC2")
make_texreg("behavior_logit_regression", list(tobit_dictator, logit_spin, logit_pd),
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"lostT1:messenger" = "Lost x Messenger",
"(Intercept)" = "Constant"),
caption = "Generalized linear regressions of the behavioral measures on losing in task 1, being paired with the messenger, and their interaction",
override.se = list(summ_tobit_dictator$coefficients[,2],
summ_logit_spin[,2],
summ_logit_pd[,2]),
override.pvalues = list(summ_tobit_dictator$coefficients[,4],
summ_logit_spin[,4],
summ_logit_pd[,4]),
multiple.tasks = "glm",
refresh = TRUE,
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} Tobit regression with robust standard errors in parentheses for the first column (censoring at 0 and 50 cents),
and logistic regressions with robust standard errors in parentheses for the second and third column.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.",
"\\item[\\hspace{-5mm}] %stars."))
# Table B3 ("Table 2 w/ logit"). Emotionality w/ logit ---------------------------------------
tobit_dictator <- tobit(dictator_all ~ lostT1*messenger*emotionalMsg, left = 0, right = 50, data = df1, cluster = ResponseId)
summ_tobit_dictator <- summary(tobit_dictator)
logit_spin <- glm(spin_all ~ lostT1*messenger*emotionalMsg, family = binomial(link = "logit"),
data = df1)
summ_logit_spin <- coeftest(logit_spin, vcov = vcovHC, type = "HC2")
logit_pd <- glm(pd_all ~ lostT1*messenger*emotionalMsg, family = binomial(link = "logit"),
data = df1)
summ_logit_pd <- coeftest(logit_pd, vcov = vcovHC, type = "HC2")
make_texreg("behavior_logit_regression_emotional", list(tobit_dictator, logit_spin, logit_pd),
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"emotionalMsg" = "Emotional Message",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:emotionalMsg" = "Lost x Emotional",
"messenger:emotionalMsg" = "Messenger x Emotional",
"lostT1:messenger:emotionalMsg" = "Lost x Messenger x Emotional",
"(Intercept)" = "Constant"),
caption = "Generalized linear regressions of the behavioral measures on losing in task 1, being paired with the messenger, emotionality of message, and their interaction",
scalebox = .9,
override.se = list(summ_tobit_dictator$coefficients[,2],
summ_logit_spin[,2],
summ_logit_pd[,2]),
override.pvalues = list(summ_tobit_dictator$coefficients[,4],
summ_logit_spin[,4],
summ_logit_pd[,4]),
multiple.tasks = "glm",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} Tobit regression with robust standard errors in parentheses for the first column (censoring at 0 and 50 cents),
and logistic regressions with robust standard errors in parentheses for the second and third column.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.",
"\\item[\\hspace{-5mm}] %stars."))
# Table B4 ("Table 3 w/ logit"). Type of task w/ logit ---------------------------------------
tobit_dictator <- tobit(dictator_all ~ lostT1*messenger*counting, left = 0, right = 50, data = df1, cluster = ResponseId)
summ_tobit_dictator <- summary(tobit_dictator)
logit_spin <- glm(spin_all ~ lostT1*messenger*counting, family = binomial(link = "logit"),
data = df1)
summ_logit_spin <- coeftest(logit_spin, vcov = vcovHC, type = "HC2")
logit_pd <- glm(pd_all ~ lostT1*messenger*counting, family = binomial(link = "logit"),
data = df1)
summ_logit_pd <- coeftest(logit_pd, vcov = vcovHC, type = "HC2")
make_texreg("behavior_logit_regression_counting", list(tobit_dictator, logit_spin, logit_pd),
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"counting" = "Counting Task",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:counting" = "Lost x Counting",
"messenger:counting" = "Messenger x Counting",
"lostT1:messenger:counting" = "Lost x Messenger x Counting",
"(Intercept)" = "Constant"),
caption = "Generalized linear regressions of the behavioral measures on losing in task 1, being paired with the messenger, type of task, and their interaction",
override.se = list(summ_tobit_dictator$coefficients[,2],
summ_logit_spin[,2],
summ_logit_pd[,2]),
override.pvalues = list(summ_tobit_dictator$coefficients[,4],
summ_logit_spin[,4],
summ_logit_pd[,4]),
multiple.tasks = "glm",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} Tobit regression with robust standard errors in parentheses for the first column (censoring at 0 and 50 cents),
and logistic regressions with robust standard errors in parentheses for the second and third column.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.",
"\\item[\\hspace{-5mm}] %stars."))
# Table B5. ("Table 1 w/ demographics"). Behavior regression w/ demographics ----------------------------------------------------------------
robust_list <- map(outcomes[1:4],
~lm_robust(as.formula(
paste(paste0(.x, "~lostT1*messenger"),
"age", "female", "ideology", "education", "employed", "white", "hispNew", "believeLuck", "emotionReg", "justWorld", sep = "+")),
data = df1))
list <- robust_list
# STM effect
pvalues1 <- rep(0, 4)
for(i in seq_along(list)){
pvalues1[i] <-  as.numeric(summary(glht(list[[i]], c("messenger + lostT1:messenger = 0")))$test$pvalues)
}
# RTM effect
pvalues2 <- rep(0,4)
for(i in seq_along(list)){
pvalues2[i] <-  list[[i]]$p.value[3]
}
# RTM = -STM?
pvalues3 <- rep(0, 4)
for(i in seq_along(list)){
pvalues3[i] <-  as.numeric(summary(glht(list[[i]], linfct = c("2*messenger + lostT1:messenger = 0")))$test$pvalues)
}
# TMB
joint_hypothesis <- c("messenger = 0", "lostT1:messenger = 0")
pvalues4 <- rep(0,4)
for(i in seq_along(list)){
pvalues4[i] <-  linearHypothesis(list[[i]], joint_hypothesis, test = "F")$`Pr(>F)`[2]
}
make_texreg("behavior_regression_demographic", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"lostT1:messenger" = "Lost x Messenger",
"age" = "Age",
"female" = "Female",
"ideology" = "Ideology",
"education" = "Education",
"employed" = "Employed",
"white" = "White",
"hispNew" = "Hispanic",
"believeLuck" = "Beliefs in luck",
"emotionReg" = "Emotion regulation",
"justWorld" = "Just world",
"(Intercept)" = "Constant"),
custom.gof.rows = list("STM: $\\beta_2 + \\beta_3 = 0$ $p$-values" = pvalues1,
"RTM: $\\beta_2 = 0$ $p$-values" = pvalues2,
"RTM = $-$STM: $2 \\beta_2+\\beta_3 = 0$ $p$-values" = pvalues3,
"TMB: $\\beta_2 = 0, \\beta_3 = 0$ $p$-values" = pvalues4),
caption = "Regressions of the behavioral measures on losing in task 1, being paired with the messenger, and their interaction (including demographic controls)",
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.
Demographic controls include age, gender, ideology,
education, employment, white, Hispanic, the belief in luck scale, the emotion regulation scale, and the just world scale.",
"\\item[\\hspace{-5mm}] %stars."))
# Table B6. ("Table 2 w/ demographics"). Emotionality w/ demographics --------
robust_list <- map(outcomes[1:4],
~lm_robust(as.formula(
paste(paste0(.x, "~lostT1*messenger*emotionalMsg"),
"age", "female", "ideology", "education", "employed", "white", "hispNew", "believeLuck", "emotionReg", "justWorld", sep = "+")),
data = df1))
list <- robust_list
make_texreg("behavior_regression_emotional_demographic", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"emotionalMsg" = "Emotional Message",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:emotionalMsg" = "Lost x Emotional",
"messenger:emotionalMsg" = "Messenger x Emotional",
"lostT1:messenger:emotionalMsg" = "Lost x Messenger x Emotional",
"age" = "Age",
"female" = "Female",
"ideology" = "Ideology",
"education" = "Education",
"employed" = "Employed",
"white" = "White",
"hispNew" = "Hispanic",
"believeLuck" = "Beliefs in luck",
"emotionReg" = "Emotion regulation",
"justWorld" = "Just world",
"(Intercept)" = "Constant"),
caption = "Regressions of the behavioral measures on losing in task 1, being paired with the messenger, emotionality of message, and their interaction (including demographic controls)",
multiple.tasks = "normal",
scalebox = .9,
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.
Demographic controls include age, gender, ideology,
education, employment, white, Hispanic, the belief in luck scale, the emotion regulation scale, and the just world scale.",
"\\item[\\hspace{-5mm}] %stars."))
# Table B7. ("Table 3 w/ demographics"). Type of task w/ demographics --------
robust_list <- map(outcomes[1:4],
~lm_robust(as.formula(
paste(paste0(.x, "~lostT1*messenger*counting"),
"age", "female", "ideology", "education", "employed", "white", "hispNew", "believeLuck", "emotionReg", "justWorld", sep = "+")),
data = df1))
list <- robust_list
make_texreg("behavior_regression_counting_demographic", list,
custom.model.names = c("\\makecell{Dictator\\\\Game}", "\\makecell{Spin the\\\\Wheel}",
"\\makecell{Prisoner's\\\\Dilemma}", "\\makecell{Behavioral\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"counting" = "Counting Task",
"lostT1:messenger" = "Lost x Messenger",
"lostT1:counting" = "Lost x Counting",
"messenger:counting" = "Messenger x Counting",
"lostT1:messenger:counting" = "Lost x Messenger x Counting",
"age" = "Age",
"female" = "Female",
"ideology" = "Ideology",
"education" = "Education",
"employed" = "Employed",
"white" = "White",
"hispNew" = "Hispanic",
"believeLuck" = "Beliefs in luck",
"emotionReg" = "Emotion regulation",
"justWorld" = "Just world",
"(Intercept)" = "Constant"),
caption = "Regressions of the behavioral measures on losing in task 1, being paired with the messenger, type of task, and their interaction (including demographic controls)",
multiple.tasks = "normal",
scalebox = .9,
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
In the dictator game, the dependent variable (DV) is giving up to 50 cents to the partner.
In the spin the wheel task, the DV is choosing the partner to spin the wheel on one’s behalf instead of the computer.
In the prisoner’s dilemma, the DV is choosing cooperation.
In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.
Demographic controls include age, gender, ideology,
education, employment, white, Hispanic, the belief in luck scale, the emotion regulation scale, and the just world scale.",
"\\item[\\hspace{-5mm}] %stars."))
# Table B8. ("Table 4 w/ demographics"). Attitude regression w/ demographics --------
robust_list <- map(outcomes[5:9],
~lm_robust(as.formula(
paste(paste0(.x, "~lostT1*messenger"),
"age", "female", "ideology", "education", "employed", "white", "hispNew", "believeLuck", "emotionReg", "justWorld", sep = "+")),
data = df1))
list <- robust_list
# STM effect
pvalues1 <- rep(0, 5)
for(i in seq_along(list)){
pvalues1[i] <-  as.numeric(summary(glht(list[[i]], c("messenger + lostT1:messenger = 0")))$test$pvalues)
}
# RTM effect
pvalues2 <- rep(0,5)
for(i in seq_along(list)){
pvalues2[i] <-  list[[i]]$p.value[3]
}
# RTM = -STM?
pvalues3 <- rep(0, 5)
for(i in seq_along(list)){
pvalues3[i] <-  as.numeric(summary(glht(list[[i]], linfct = c("2*messenger + lostT1:messenger = 0")))$test$pvalues)
}
# TMB
joint_hypothesis <- c("messenger  = 0", "lostT1:messenger = 0")
pvalues4 <- rep(0,5)
for(i in seq_along(list)){
pvalues4[i] <-  linearHypothesis(list[[i]], joint_hypothesis, test = "F")$`Pr(>F)`[2]
}
make_texreg("attitude_regression_demographic", list,
custom.model.names = c("Trustworthy", "Nice", "Likeable", "Generous",
"\\makecell{Attitudes\\\\Index}"),
custom.coef.map = list("lostT1" = "Lost T1",
"messenger" = "Messenger",
"lostT1:messenger" = "Lost x Messenger",
"age" = "Age",
"female" = "Female",
"ideology" = "Ideology",
"education" = "Education",
"employed" = "Employed",
"white" = "White",
"hispNew" = "Hispanic",
"believeLuck" = "Beliefs in luck",
"emotionReg" = "Emotion regulation",
"justWorld" = "Just world",
"(Intercept)" = "Constant"),
custom.gof.rows = list("STM: $\\beta_2 + \\beta_3 = 0$ $p$-values" = pvalues1,
"RTM: $\\beta_2 = 0$ $p$-values" = pvalues2,
"RTM = $-$STM: $2\\beta_2+\\beta_3 = 0$ $p$-values" = pvalues3,
"TMB: $\\beta_2 = 0, \\beta_3 = 0$ $p$-values" = pvalues4),
caption = "Regressions of attitude measures on losing in task 1, being paired with the messenger, and their interaction (including demographic controls)",
scalebox = .9,
multiple.tasks = "normal",
custom.note = paste("\\item[\\hspace{-5mm}] \\textit{Note:} OLS regressions with robust standard errors in parentheses.
The trustworthy, nice, likeable, and generous DVs asks respondents to rate these messenger's characteristics on a 7-point Likert scale, where a score of 1 indicates that the messenger does not have that trait at all, while a score of 7 means that a trait describes the messenger extremely well.
In the attitudes index, the DV is calculated by averaging the standardized ratings of the trustworthy, nice, likeable, and generous DVs to an index ranging from 0 to 1.
Demographic controls include age, gender, ideology,
education, employment, white, Hispanic, the belief in luck scale, the emotion regulation scale, and the just world scale.",
"\\item[\\hspace{-5mm}] %stars."))
