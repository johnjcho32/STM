test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
texreg(test, include.ci = FALSE)
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger = 0", "lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  + lostT1 = 0", "lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  = 0", "lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  = 0", "messenger + lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
test2 <-  lm_robust(behavior_all ~ lostT1, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
anova(test, test2)
Anova(test, test2)
joint_test <- linearHypothesis(test, joint_hypothesis, vcov = vcovHC)
test <- lm(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
test2 <-  lm(behavior_all ~ lostT1, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
Anova(test, test2)
joint_test
anova(test, test2)
anova(test2, test)
joint_hypothesis <- c("messenger  = 0", "messenger + lostT1:messenger = 0")
test <- lm(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
test2 <-  lm(behavior_all ~ lostT1, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
anova(test2, test)
joint_hypothesis <- c("messenger  = 0", "lostT1:messenger = 0")
test <- lm(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
test2 <-  lm(behavior_all ~ lostT1, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
anova(test2, test)
joint_test
joint_hypothesis <- c("messenger  = 0", "messenger + lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  = 0", "messenger + lostT1:messenger = 0")
test <- lm(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  = 0", "messenger + lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  = 1", "messenger + lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
test2 <-  lm(behavior_all ~ lostT1, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
anova(test2, test)
joint_hypothesis <- c("messenger  = 1", "messenger + lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
joint_hypothesis <- c("messenger  = 1", "lostT1:messenger = 0")
test <- lm_robust(behavior_all ~ lostT1*messenger, data = df2,
subset = Instructions2 == "Opposite Fate")
joint_test <- linearHypothesis(test, joint_hypothesis)
joint_test
test
texreg(test, include.ci = FALSE)
df1 <- read_dta("data/cleaned_data.dta")
# Load libraries and data -------------------------------------------------
library(haven)
df1 <- read_dta("data/cleaned_data.dta")
View(df1)
# First creates individual figures for each of the outcome variables
for(i in 1:9){
d <- df1 %>%
mutate(messenger_new = relevel(factor(messenger_new), ref = "Other")) %>%
group_by(lost_new) %>%
reframe(tidy(lm_robust(as.formula(paste0(s1behavior_outcomes[i], "~ messenger_new")), data = pick(everything())))) %>%
filter(term != "(Intercept)") %>%
mutate(lost_new = case_when(lost_new == "Won" ~ "Reward the\nMessenger",
lost_new == "Lost" ~ "Shoot the\nMessenger"),
lost_new = fct_rev(factor(lost_new)))
# Change y-axis label and limit/breaks depending on the outcome measure in question.
if(s1behavior_outcomes[i] == "dictator_all"){
yaxis = "Cents Given"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Choose Human"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Cooperate"
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
yaxis = "Rating"
} else if(s1behavior_outcomes[i] %in% c("behavior_all", "likeOther")){
yaxis = "Index"
}
if(s1behavior_outcomes[i] %in% c("spin_all", "pd_all", "behavior_all")){
lim = c(-.3, .35)
breaks = round(seq(-.3, .3, .1), digits = 2)
} else if(s1behavior_outcomes[i] == "dictator_all"){
lim = c(-4,4.55)
breaks = seq(-4, 4, 1)
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
lim = c(-.5, .5)
breaks = seq(-.5, .5, .1)
} else if(s1behavior_outcomes[i] == "likeOther"){
lim = c(-.1,.1)
breaks = seq(-.1, .1, .05)
}
g <- ggplot(d, aes(x = lost_new, y = estimate)) +
geom_bar(stat="identity", fill="lightgray",
position=position_dodge()) +
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=.2,
position=position_dodge(.9)) +
scale_y_continuous(limits = lim, breaks = breaks)+
theme_few() +
geom_hline(yintercept = 0) +
labs(title = s1behavior_outcomes_names[i], x= NULL, y = yaxis) +
theme(axis.text.x = element_text(colour = c("red", "green4")))
ggsave(g, file = paste0(save_path, "figures/study1", s1behavior_outcomes[i], ".png"),
height = 5.5, width = 4)
tex <- paste0("\\renewcommand{\\baselinestretch}{1.25}%
\\begin{figure}[!t]%
\\centering
\\captionsetup{width=0.5\\linewidth}
\\includegraphics[width=0.5\\linewidth]{figures/study1", s1behavior_outcomes[i], ".png}
\\caption{", caption_all[i], ".
\\textit{Note: OLS regression with robust standard errors, with error bars representing 95\\% confidence intervals. ", footnote_all[i], "}}
\\label{fig:study1", s1behavior_outcomes[i], "}
\\end{figure}%
\\renewcommand{\\baselinestretch}{1.67}%")
cat(tex, sep = "\n", file = paste0(save_path, "figures_tex/study1_", s1behavior_outcomes[i], ".tex"))
all_list[[i]] <- g
}
library(tidyverse)
# First creates individual figures for each of the outcome variables
for(i in 1:9){
d <- df1 %>%
mutate(messenger_new = relevel(factor(messenger_new), ref = "Other")) %>%
group_by(lost_new) %>%
reframe(tidy(lm_robust(as.formula(paste0(s1behavior_outcomes[i], "~ messenger_new")), data = pick(everything())))) %>%
filter(term != "(Intercept)") %>%
mutate(lost_new = case_when(lost_new == "Won" ~ "Reward the\nMessenger",
lost_new == "Lost" ~ "Shoot the\nMessenger"),
lost_new = fct_rev(factor(lost_new)))
# Change y-axis label and limit/breaks depending on the outcome measure in question.
if(s1behavior_outcomes[i] == "dictator_all"){
yaxis = "Cents Given"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Choose Human"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Cooperate"
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
yaxis = "Rating"
} else if(s1behavior_outcomes[i] %in% c("behavior_all", "likeOther")){
yaxis = "Index"
}
if(s1behavior_outcomes[i] %in% c("spin_all", "pd_all", "behavior_all")){
lim = c(-.3, .35)
breaks = round(seq(-.3, .3, .1), digits = 2)
} else if(s1behavior_outcomes[i] == "dictator_all"){
lim = c(-4,4.55)
breaks = seq(-4, 4, 1)
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
lim = c(-.5, .5)
breaks = seq(-.5, .5, .1)
} else if(s1behavior_outcomes[i] == "likeOther"){
lim = c(-.1,.1)
breaks = seq(-.1, .1, .05)
}
g <- ggplot(d, aes(x = lost_new, y = estimate)) +
geom_bar(stat="identity", fill="lightgray",
position=position_dodge()) +
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=.2,
position=position_dodge(.9)) +
scale_y_continuous(limits = lim, breaks = breaks)+
theme_few() +
geom_hline(yintercept = 0) +
labs(title = s1behavior_outcomes_names[i], x= NULL, y = yaxis) +
theme(axis.text.x = element_text(colour = c("red", "green4")))
ggsave(g, file = paste0(save_path, "figures/study1", s1behavior_outcomes[i], ".png"),
height = 5.5, width = 4)
tex <- paste0("\\renewcommand{\\baselinestretch}{1.25}%
\\begin{figure}[!t]%
\\centering
\\captionsetup{width=0.5\\linewidth}
\\includegraphics[width=0.5\\linewidth]{figures/study1", s1behavior_outcomes[i], ".png}
\\caption{", caption_all[i], ".
\\textit{Note: OLS regression with robust standard errors, with error bars representing 95\\% confidence intervals. ", footnote_all[i], "}}
\\label{fig:study1", s1behavior_outcomes[i], "}
\\end{figure}%
\\renewcommand{\\baselinestretch}{1.67}%")
cat(tex, sep = "\n", file = paste0(save_path, "figures_tex/study1_", s1behavior_outcomes[i], ".tex"))
all_list[[i]] <- g
}
df1 <- read_dta("data/cleaned_data.dta") %>%
mutate(messenger_new = case_when(messenger == 0 ~ "Other",
messenger == 1 ~ "Messenger"),
lost_new = case_when(lostT1 == 0 ~ "Won",
lostT1 == 1 ~ "Lost"),
lost_new = relevel(factor(lost_new), "Won"),
messenger_lost = paste(messenger_new, lost_new, sep = ", "),
messenger_lost = factor(messenger_lost, levels = c("Messenger, Won", "Other, Won", "Messenger, Lost", "Other, Lost"))) %>%
filter(!is.na(lost_new)) %>%
group_by(messenger_new, lost_new) %>%
mutate(mean_dictator = mean(dictator_all, na.rm = T),
mean_behavior = mean(behavior_all, na.rm = T)) %>%
ungroup()
# First creates individual figures for each of the outcome variables
for(i in 1:9){
d <- df1 %>%
mutate(messenger_new = relevel(factor(messenger_new), ref = "Other")) %>%
group_by(lost_new) %>%
reframe(tidy(lm_robust(as.formula(paste0(s1behavior_outcomes[i], "~ messenger_new")), data = pick(everything())))) %>%
filter(term != "(Intercept)") %>%
mutate(lost_new = case_when(lost_new == "Won" ~ "Reward the\nMessenger",
lost_new == "Lost" ~ "Shoot the\nMessenger"),
lost_new = fct_rev(factor(lost_new)))
# Change y-axis label and limit/breaks depending on the outcome measure in question.
if(s1behavior_outcomes[i] == "dictator_all"){
yaxis = "Cents Given"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Choose Human"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Cooperate"
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
yaxis = "Rating"
} else if(s1behavior_outcomes[i] %in% c("behavior_all", "likeOther")){
yaxis = "Index"
}
if(s1behavior_outcomes[i] %in% c("spin_all", "pd_all", "behavior_all")){
lim = c(-.3, .35)
breaks = round(seq(-.3, .3, .1), digits = 2)
} else if(s1behavior_outcomes[i] == "dictator_all"){
lim = c(-4,4.55)
breaks = seq(-4, 4, 1)
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
lim = c(-.5, .5)
breaks = seq(-.5, .5, .1)
} else if(s1behavior_outcomes[i] == "likeOther"){
lim = c(-.1,.1)
breaks = seq(-.1, .1, .05)
}
g <- ggplot(d, aes(x = lost_new, y = estimate)) +
geom_bar(stat="identity", fill="lightgray",
position=position_dodge()) +
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=.2,
position=position_dodge(.9)) +
scale_y_continuous(limits = lim, breaks = breaks)+
theme_few() +
geom_hline(yintercept = 0) +
labs(title = s1behavior_outcomes_names[i], x= NULL, y = yaxis) +
theme(axis.text.x = element_text(colour = c("red", "green4")))
ggsave(g, file = paste0(save_path, "figures/study1", s1behavior_outcomes[i], ".png"),
height = 5.5, width = 4)
tex <- paste0("\\renewcommand{\\baselinestretch}{1.25}%
\\begin{figure}[!t]%
\\centering
\\captionsetup{width=0.5\\linewidth}
\\includegraphics[width=0.5\\linewidth]{figures/study1", s1behavior_outcomes[i], ".png}
\\caption{", caption_all[i], ".
\\textit{Note: OLS regression with robust standard errors, with error bars representing 95\\% confidence intervals. ", footnote_all[i], "}}
\\label{fig:study1", s1behavior_outcomes[i], "}
\\end{figure}%
\\renewcommand{\\baselinestretch}{1.67}%")
cat(tex, sep = "\n", file = paste0(save_path, "figures_tex/study1_", s1behavior_outcomes[i], ".tex"))
all_list[[i]] <- g
}
library(haven)
library(car)
library(tidyverse)
library(estimatr)
library(texreg)
library(ggthemes)
library(kableExtra)
library(foreign)
library(multcomp)
library(gridExtra)
df1 <- read_dta("data/cleaned_data.dta") %>%
mutate(messenger_new = case_when(messenger == 0 ~ "Other",
messenger == 1 ~ "Messenger"),
lost_new = case_when(lostT1 == 0 ~ "Won",
lostT1 == 1 ~ "Lost"),
lost_new = relevel(factor(lost_new), "Won"),
messenger_lost = paste(messenger_new, lost_new, sep = ", "),
messenger_lost = factor(messenger_lost, levels = c("Messenger, Won", "Other, Won", "Messenger, Lost", "Other, Lost"))) %>%
filter(!is.na(lost_new)) %>%
group_by(messenger_new, lost_new) %>%
mutate(mean_dictator = mean(dictator_all, na.rm = T),
mean_behavior = mean(behavior_all, na.rm = T)) %>%
ungroup()
caption_all <- map_chr(s1behavior_outcomes_names, ~paste0("Difference in the DV of the ", .x, " for messengers and non-messengers
by losing (STM) and winning (RTM), Study 1"))
footnote_all <- c(
"In the dictator game, the DV is giving up to 50 cents to the partner.",
"In the spin the wheel task, the DV is a binary measure of choosing the partner to spin the wheel on one's behalf instead of the computer.",
"In the prisoner's dilemma, the DV is a binary measure of choosing cooperation.",
"In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"The trustworthy DV asks respondents to rate the messenger's trustworthiness on a 7-point Likert scale.",
"The nice DV asks respondents to rate the messenger's niceness on a 7-point Likert scale.",
"The likeable DV asks respondents to rate the messenger's likability on a 7-point Likert scale.",
"The generous DV asks respondents to rate the messenger's generosity on a 7-point Likert scale.",
"In the attitudes index, the DV is calculated by averaging the standardized ratings of the trustworthy, nice, likeable, and generous DVs to an index ranging from 0 to 1.")
all_list = list()
# First creates individual figures for each of the outcome variables
for(i in 1:9){
d <- df1 %>%
mutate(messenger_new = relevel(factor(messenger_new), ref = "Other")) %>%
group_by(lost_new) %>%
reframe(tidy(lm_robust(as.formula(paste0(s1behavior_outcomes[i], "~ messenger_new")), data = pick(everything())))) %>%
filter(term != "(Intercept)") %>%
mutate(lost_new = case_when(lost_new == "Won" ~ "Reward the\nMessenger",
lost_new == "Lost" ~ "Shoot the\nMessenger"),
lost_new = fct_rev(factor(lost_new)))
# Change y-axis label and limit/breaks depending on the outcome measure in question.
if(s1behavior_outcomes[i] == "dictator_all"){
yaxis = "Cents Given"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Choose Human"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Cooperate"
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
yaxis = "Rating"
} else if(s1behavior_outcomes[i] %in% c("behavior_all", "likeOther")){
yaxis = "Index"
}
if(s1behavior_outcomes[i] %in% c("spin_all", "pd_all", "behavior_all")){
lim = c(-.3, .35)
breaks = round(seq(-.3, .3, .1), digits = 2)
} else if(s1behavior_outcomes[i] == "dictator_all"){
lim = c(-4,4.55)
breaks = seq(-4, 4, 1)
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
lim = c(-.5, .5)
breaks = seq(-.5, .5, .1)
} else if(s1behavior_outcomes[i] == "likeOther"){
lim = c(-.1,.1)
breaks = seq(-.1, .1, .05)
}
g <- ggplot(d, aes(x = lost_new, y = estimate)) +
geom_bar(stat="identity", fill="lightgray",
position=position_dodge()) +
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=.2,
position=position_dodge(.9)) +
scale_y_continuous(limits = lim, breaks = breaks)+
theme_few() +
geom_hline(yintercept = 0) +
labs(title = s1behavior_outcomes_names[i], x= NULL, y = yaxis) +
theme(axis.text.x = element_text(colour = c("red", "green4")))
ggsave(g, file = paste0(save_path, "figures/study1", s1behavior_outcomes[i], ".png"),
height = 5.5, width = 4)
tex <- paste0("\\renewcommand{\\baselinestretch}{1.25}%
\\begin{figure}[!t]%
\\centering
\\captionsetup{width=0.5\\linewidth}
\\includegraphics[width=0.5\\linewidth]{figures/study1", s1behavior_outcomes[i], ".png}
\\caption{", caption_all[i], ".
\\textit{Note: OLS regression with robust standard errors, with error bars representing 95\\% confidence intervals. ", footnote_all[i], "}}
\\label{fig:study1", s1behavior_outcomes[i], "}
\\end{figure}%
\\renewcommand{\\baselinestretch}{1.67}%")
cat(tex, sep = "\n", file = paste0(save_path, "figures_tex/study1_", s1behavior_outcomes[i], ".tex"))
all_list[[i]] <- g
}
# Load libraries and data -------------------------------------------------
library(haven)
library(tidyverse)
source("functions/make_table.R")
df1 <- read_dta("data/cleaned_data.dta") %>%
mutate(messenger_new = case_when(messenger == 0 ~ "Other",
messenger == 1 ~ "Messenger"),
lost_new = case_when(lostT1 == 0 ~ "Won",
lostT1 == 1 ~ "Lost"),
lost_new = relevel(factor(lost_new), "Won"),
messenger_lost = paste(messenger_new, lost_new, sep = ", "),
messenger_lost = factor(messenger_lost, levels = c("Messenger, Won", "Other, Won", "Messenger, Lost", "Other, Lost"))) %>%
filter(!is.na(lost_new)) %>%
group_by(messenger_new, lost_new) %>%
mutate(mean_dictator = mean(dictator_all, na.rm = T),
mean_behavior = mean(behavior_all, na.rm = T)) %>%
ungroup()
df2 <- read_dta("data/cleaned_data2.dta") %>%
filter(!is.na(lostT1)) %>%
mutate(messenger_new = case_when(messenger == 0 ~ "Other",
messenger == 1 ~ "Messenger"),
lost_new = case_when(lostT1 == 0 ~ "Won",
lostT1 == 1 ~ "Lost"),
lost_new = relevel(factor(lost_new), "Won"),
messenger_lost = paste(messenger_new, lost_new, sep = ", "),
messenger_lost = factor(messenger_lost, levels = c("Messenger, Won", "Other, Won", "Messenger, Lost", "Other, Lost"))) %>%
mutate(Instructions2 = haven::as_factor(Instructions2),
Instructions2 = case_when(Instructions2 == "Shared" ~ "Shared Fate",
Instructions2 == "Opposite" ~ "Opposite Fate",
TRUE ~ Instructions2),
Instructions2 = factor(Instructions2, levels = c("Shared Fate", "Unrelated Fate", "Opposite Fate"))) %>%
mutate(Instructions1 = haven::as_factor(Instructions1),
Instructions1 = factor(Instructions1, levels = c("0.50 Opposite", "0.05 Opposite",
"0.50 Shared", "0.05 Shared", "Unrelated Fate"
))) %>%
mutate(likePartner = (likePartner-1)/6)
save_path <- "../../../../Dropbox/Apps/Overleaf/Shoot the Messenger Paper/"
s1behavior_outcomes <- c("dictator_all", "spin_all", "pd_all", "behavior_all",
"trust", "nice", "likeable", "generous", "likeOther")
s1behavior_outcomes_names <- c("Dictator Game", "Spin the Wheel", "Prisoner's Dilemma", "Behavioral Index",
"Trustworthy", "Nice", "Likeable", "Generous", "Attitudes Index")
caption_all <- map_chr(s1behavior_outcomes_names, ~paste0("Difference in the DV of the ", .x, " for messengers and non-messengers
by losing (STM) and winning (RTM), Study 1"))
footnote_all <- c(
"In the dictator game, the DV is giving up to 50 cents to the partner.",
"In the spin the wheel task, the DV is a binary measure of choosing the partner to spin the wheel on one's behalf instead of the computer.",
"In the prisoner's dilemma, the DV is a binary measure of choosing cooperation.",
"In the behavioral index, the DV is calculated by averaging the standardized scores of the dictator game, spin the wheel task, and prisoner's dilemma.",
"The trustworthy DV asks respondents to rate the messenger's trustworthiness on a 7-point Likert scale.",
"The nice DV asks respondents to rate the messenger's niceness on a 7-point Likert scale.",
"The likeable DV asks respondents to rate the messenger's likability on a 7-point Likert scale.",
"The generous DV asks respondents to rate the messenger's generosity on a 7-point Likert scale.",
"In the attitudes index, the DV is calculated by averaging the standardized ratings of the trustworthy, nice, likeable, and generous DVs to an index ranging from 0 to 1.")
all_list = list()
# First creates individual figures for each of the outcome variables
for(i in 1:9){
d <- df1 %>%
mutate(messenger_new = relevel(factor(messenger_new), ref = "Other")) %>%
group_by(lost_new) %>%
reframe(tidy(lm_robust(as.formula(paste0(s1behavior_outcomes[i], "~ messenger_new")), data = pick(everything())))) %>%
filter(term != "(Intercept)") %>%
mutate(lost_new = case_when(lost_new == "Won" ~ "Reward the\nMessenger",
lost_new == "Lost" ~ "Shoot the\nMessenger"),
lost_new = fct_rev(factor(lost_new)))
# Change y-axis label and limit/breaks depending on the outcome measure in question.
if(s1behavior_outcomes[i] == "dictator_all"){
yaxis = "Cents Given"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Choose Human"
} else if(s1behavior_outcomes[i] == "spin_all"){
yaxis = "% Cooperate"
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
yaxis = "Rating"
} else if(s1behavior_outcomes[i] %in% c("behavior_all", "likeOther")){
yaxis = "Index"
}
if(s1behavior_outcomes[i] %in% c("spin_all", "pd_all", "behavior_all")){
lim = c(-.3, .35)
breaks = round(seq(-.3, .3, .1), digits = 2)
} else if(s1behavior_outcomes[i] == "dictator_all"){
lim = c(-4,4.55)
breaks = seq(-4, 4, 1)
} else if(s1behavior_outcomes[i] %in% c("trust", "nice", "likeable", "generous")){
lim = c(-.5, .5)
breaks = seq(-.5, .5, .1)
} else if(s1behavior_outcomes[i] == "likeOther"){
lim = c(-.1,.1)
breaks = seq(-.1, .1, .05)
}
g <- ggplot(d, aes(x = lost_new, y = estimate)) +
geom_bar(stat="identity", fill="lightgray",
position=position_dodge()) +
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=.2,
position=position_dodge(.9)) +
scale_y_continuous(limits = lim, breaks = breaks)+
theme_few() +
geom_hline(yintercept = 0) +
labs(title = s1behavior_outcomes_names[i], x= NULL, y = yaxis) +
theme(axis.text.x = element_text(colour = c("red", "green4")))
ggsave(g, file = paste0(save_path, "figures/study1", s1behavior_outcomes[i], ".png"),
height = 5.5, width = 4)
tex <- paste0("\\renewcommand{\\baselinestretch}{1.25}%
\\begin{figure}[!t]%
\\centering
\\captionsetup{width=0.5\\linewidth}
\\includegraphics[width=0.5\\linewidth]{figures/study1", s1behavior_outcomes[i], ".png}
\\caption{", caption_all[i], ".
\\textit{Note: OLS regression with robust standard errors, with error bars representing 95\\% confidence intervals. ", footnote_all[i], "}}
\\label{fig:study1", s1behavior_outcomes[i], "}
\\end{figure}%
\\renewcommand{\\baselinestretch}{1.67}%")
cat(tex, sep = "\n", file = paste0(save_path, "figures_tex/study1_", s1behavior_outcomes[i], ".tex"))
all_list[[i]] <- g
}
View(g)
g[[1]]
g[[2]]
all_list[[1]]
all_list[[2]]
all_list[[3]]
all_list[[4]]
